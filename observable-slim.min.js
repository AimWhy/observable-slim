/*
 * 	Observable Slim
 * 	Version 0.0.1
 * 	https://github.com/elliotnb/observable-slim
 *
 * 	Version 0.0.1. Copyright 2017, Elliot B. All rights reserved.
 *
 * 	Licensed under the MIT license:
 * 	http://www.opensource.org/licenses/MIT
 *
 *	Observable Slim is a singleton that allows you to observe changes made to an object and any nested
 *	children of that object. It is intended to assist with one-way data binding, that is, in MVC parlance, 
 *	reflecting changes in the model to the view. Observable Slim aspires to be as lightweight and easily
 *	understood as possible. Minifies down to roughly 500 characters.
 *	Usage:
 *	
 *		var test = {};
 *		var p = ObservableSlim.create(test);
 *
 *		ObservableSlim.observe(p, function(target, property, value, path) {
 *			console.log("Change on '"+path+"', new value: " + JSON.stringify(value));
 *		});
 *		
 *		p.hello = "world";  		// change on 'hello', new value: "world"
 *		p.testing = {}; 			// change on 'testing', new value: {}
 *		p.testing.blah = 42;		// change on 'testing.blah', new value: 42
 *		p.arr = [];					// change on 'testing.arr', new value: []
 *		p.arr.push("hello world");	// change on 'testing.arr.0', new value: "hello world"
 *		console.log(test)			// {"hello":"world","testing":{"blah":42},"arr":["hello world"]}
 */
var ObservableSlim=function(){var r=[],e=function(n,t,o,u){var s=t||null,b=u||"",v=o||{get:function(r,n){return"object"==typeof r[n]&&null!==r[n]?(b=""!==b?b+"."+n:n,e(r[n],s,v,b)):r[n]},set:function(r,e,n){if(r[e]!==n){currentPath=""!==b?b+"."+e:e;for(var t=0;t<s.observers.length;t++)s.observers[t](r,e,n,currentPath);r[e]=n}return!0}},a=new Proxy(n,v);return null===s&&(s={observable:a,observers:[]}),r.push(s),a};return{create:function(r){return e(r)},observe:function(e,n){for(var t=r.length;t--;)if(r[t].observable===e){r[t].observers.push(n);break}}}}();